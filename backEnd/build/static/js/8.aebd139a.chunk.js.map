{"version":3,"sources":["Containers/RegisterForm/RegisterForm.js","Components/Home/Register/Register.js"],"names":["connect","mapStateToProps","state","_csrf","error","loading","errorText","serverResErrors","registerText","registerForm","registerEmail","mapDispatchToProps","dispatch","onSubmitHandler","data","actions","clearError","LogIn","props","_useState","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","lastName","company","nip","street","city","post","country","email","isEmail","email2","password","password2","_useState2","Object","slicedToArray","controls","setControls","_useState3","show","message","_useState4","showModal","setShowModal","_useState5","_useState6","formIsValid","setFormIsValid","setShowRegister","useContext","app_context","formElementsArray","formElementsKeyArray","key","id","config","useEffect","validFormHandler","window","react","changeInputsFormText","react_default","a","createElement","toString","registerSuccess1","submitHandler","dataSet","date","Date","getTime","workers","orders","invoices","activ","permission","cancelHandler","cancelForm","form","formElement","Input","invalid","shouldValidate","register","padding","changed","event","inputChangedHandler","Fragment","Spinner","Modal","className","onClick","hideModal","cancel","style","margin","transform","clause","disabled","checkIdentityHandler","checkIdentity","passwordNotIdentity","emailNotIdentity","marginRight","submit","__webpack_exports__","Register","formName","RegisterForm"],"mappings":"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","file":"static/js/8.aebd139a.chunk.js","sourcesContent":["import React , {useState, useContext, useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {inputChangedHandler, validFormHandler, changeInputsFormText, cancelForm, checkIdentity} from '../../shared/utility';\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport Modal from '../../Components/UI/Modal/Modal'; \r\nimport AppContext from '../../context/app-context';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nconst LogIn = props => {\r\n\r\n    const [controls, setControls] = useState({\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',                \r\n                placeholder: props.registerText.name\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 20\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        lastName: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.lastName\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 20\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        company: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.company\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 30\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        nip: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.nip\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 6,\r\n                maxLength: 20\r\n                \r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.street\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 40\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        city: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.city\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 30\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        post: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.post\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 10\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.registerText.country\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 30\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: props.registerText.email\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email2: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: props.registerText.email2\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true                \r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: props.registerText.password\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 4,\r\n                maxLength: 50\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password2: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'password',\r\n                placeholder: props.registerText.password2\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 4,\r\n                maxLength: 50\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        }\r\n    });\r\n    const [showModal, setShowModal] = useState({show:false, message: null})\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    const {setShowRegister} = useContext(AppContext);\r\n    const formElementsArray = [];\r\n    const formElementsKeyArray = [];\r\n    for ( let key in controls ) {\r\n        formElementsArray.push( {\r\n            id: key,\r\n            config: controls[key]\r\n        });\r\n        formElementsKeyArray.push(key);\r\n    };\r\n        \r\n    useEffect(() => {\r\n        validFormHandler(controls, setFormIsValid);\r\n    }, [controls]);\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 400);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        changeInputsFormText(controls, formElementsKeyArray, props.registerText, setControls)\r\n    // eslint-disable-next-line\r\n    }, [props.registerText]);\r\n\r\n    useEffect(() => {\r\n        if(props.error) {\r\n            setShowModal({\r\n                show:true,\r\n                message: <p>{props.errorText[props.error.toString()]}</p> || <p>{props.error}</p>                \r\n            })\r\n        }\r\n    // eslint-disable-next-line\r\n    },[props.error]);\r\n\r\n    useEffect(() => {\r\n        if(props.registerEmail) {\r\n            setShowModal({show:true,\r\n                message:<p>{props.registerText.registerSuccess1} {props.registerEmail} {<br></br>} {props.registerText.registerSuccess2}</p>\r\n            })\r\n        }\r\n    // eslint-disable-next-line\r\n    },[props.registerEmail]);\r\n\r\n    const checkIdentityHandler = () => {\r\n\r\n        if(!checkIdentity(controls.email.value, controls.email2.value)) {\r\n            return setShowModal({show:true, message: props.registerText.emailNotIdentity})\r\n        }\r\n        else {\r\n            if(!checkIdentity(controls.password.value, controls.password2.value)) {\r\n                return setShowModal({show:true, message: props.registerText.passwordNotIdentity})\r\n            }\r\n        };\r\n        submitHandler()\r\n    };\r\n    \r\n    const submitHandler = () => {        \r\n        const data = {\r\n            dataSet : {\r\n                name: controls.name.value,\r\n                lastName: controls.lastName.value,\r\n                company: controls.company.value,\r\n                nip: controls.nip.value,\r\n                street: controls.street.value,\r\n                city: controls.city.value,\r\n                post: controls.post.value,\r\n                country: controls.country.value,\r\n                email: controls.email.value,\r\n                password: controls.password.value,\r\n                date: new Date().getTime(),\r\n                workers: [],\r\n                orders: [],\r\n                invoices: [],\r\n                activ: 0,\r\n                permission: 1\r\n            },\r\n            _csrf: props._csrf\r\n        };\r\n       props.onSubmitHandler(data);\r\n    };\r\n\r\n    const cancelHandler = () => {        \r\n        cancelForm(controls, formElementsKeyArray, setControls);\r\n        props.clearError();\r\n        setShowRegister(false);\r\n    };\r\n    const hideModal = () => {\r\n        props.clearError();\r\n        setShowModal({show: false, message: null});\r\n    }\r\n     \r\n    let form = formElementsArray.map( formElement => (\r\n        <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}            \r\n            register={true}\r\n            padding=\"3px\"\r\n            changed={( event ) => inputChangedHandler( event, controls, formElement.id, setControls)}\r\n        />\r\n    ));\r\n    return (        \r\n        <>\r\n            {props.loading ? <Spinner /> : null}\r\n            <Modal show={showModal.show}>\r\n                <div>{showModal.message}</div>\r\n                <button\r\n                    className=\"btn btn-danger btn-sm mt-3\"\r\n                    onClick={props.registerEmail ? cancelHandler : hideModal}>\r\n                    {props.registerText.cancel}\r\n                </button>              \r\n            </Modal>\r\n            <form >                                \r\n                {form}\r\n                <div style={{margin: '1rem 0'}}>\r\n                    <input \r\n                    style={{transform: 'scale(1.5)'}}\r\n                    type=\"checkbox\"\r\n                    required />\r\n                    <small style={{padding: '1.5rem'}}>{props.registerText.clause}</small>\r\n                </div>                \r\n                <button \r\n                    className='btn btn-primary btn-sm' \r\n                    disabled={!formIsValid || props.loading}\r\n                    onClick={checkIdentityHandler}\r\n                    style={{marginRight: '1rem'}}>\r\n                    {props.registerText.submit}\r\n                </button>\r\n                <button \r\n                    onClick={cancelHandler}\r\n                    className='btn btn-secondary btn-sm'>\r\n                    {props.registerText.cancel}\r\n                </button>\r\n            </form>            \r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        _csrf: state.initLang._csrf,\r\n        error: state.regReducer.error,\r\n        loading: state.regReducer.loading,\r\n        errorText: state.initLang.textHome.serverResErrors,\r\n        registerText: state.initLang.textHome.registerForm,\r\n        registerEmail: state.regReducer.registerEmail\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n       onSubmitHandler: (data) => dispatch(actions.registerProcess(data)),\r\n       clearError: () => dispatch(actions.registerClearError())\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);","import React from 'react';\r\nimport RegisterForm from '../../../Containers/RegisterForm/RegisterForm';\r\n\r\nconst Register = props => (\r\n    <div className=\"container mt-5 p-2\">       \r\n        <div className=\"card\">\r\n            <h5 className=\"card-header\">{props.formName}</h5>\r\n            <div className=\"card-body\">\r\n                <RegisterForm />\r\n            </div>\r\n        </div>        \r\n    </div>\r\n);\r\nexport default Register;"],"sourceRoot":""}
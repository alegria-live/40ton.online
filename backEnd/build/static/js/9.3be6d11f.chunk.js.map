{"version":3,"sources":["Containers/Owner/Drivers/EditDriver.js"],"names":["Option","Select","confirm","Modal","connect","mapStateToProps","state","errorText","serverResErrors","driversText","driversForm","textMenu","userMenu","demo","EditDriver","props","_useState","useState","name","elementType","elementConfig","type","placeholder","value","validation","required","minLength","maxLength","valid","touched","lastName","_id","disabled","_useState2","Object","D_Project_Tir_40_react_40_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_8__","controls","setControls","_useContext","useContext","_context_menu_context__WEBPACK_IMPORTED_MODULE_11__","showEditDriver","setShowEditDriver","_useState3","_useState4","allDrivers","setAllDrivers","_useState5","_useState6","isLoading","setIsLoading","_useState7","_useState8","successMsg","setSuccesMsg","_useState9","_useState10","errorMsg","setErrorMsg","_useState11","_useState12","formIsValid","setFormIsValid","options","react__WEBPACK_IMPORTED_MODULE_9___default","a","createElement","formElementsArray","formElementsKeyArray","key","id","config","getDrivers","Axios","res","e","useEffect","validFormHandler","react__WEBPACK_IMPORTED_MODULE_9__","changeInputsFormText","submitHandler","event","_driverModel__WEBPACK_IMPORTED_MODULE_12__","trim","newData","Driver.name","Driver.lastName","driver","cancelHandler","cancelForm","clearSelect","setTimeout","form","formElement","_Components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_14__","label","invalid","shouldValidate","changed","inputChangedHandler","length","Fragment","editPanelName","choiceDriver","antd_es_select__WEBPACK_IMPORTED_MODULE_7__","style","width","onChange","setDriver","val","actualDriver","elem","copyControls","_","defaultValue","drivers","onSubmit","display","textAlign","antd_es_button__WEBPACK_IMPORTED_MODULE_3__","onClick","margin","deleteHandler","title","content","deleteConfirm","onOk","onCancel","antd_es_drawer__WEBPACK_IMPORTED_MODULE_1__","visible","placement","closable","onClose","color","editDriverSuccess","addDriverError","_Components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_15__","noDrivers"],"mappings":"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","file":"static/js/9.3be6d11f.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MenuContext from '../../../context/menu-context';\r\nimport { Driver } from './driverModel';\r\nimport { inputChangedHandler, validFormHandler, cancelForm, changeInputsFormText } from '../../../shared/utility';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport { Drawer, Select, Button, Modal } from 'antd';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Axios from 'axios';\r\nimport _ from 'lodash';\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\n\r\nconst EditDriver = props => {\r\n\r\n    const [controls, setControls] = useState({\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.driversText.name\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 20\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        lastName: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: props.driversText.lastName\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 2,\r\n                maxLength: 20\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        _id: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                disabled: true\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 6,\r\n                maxLength: 20\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        }\r\n    });\r\n    const { showEditDriver, setShowEditDriver } = useContext(MenuContext);\r\n    const [allDrivers, setAllDrivers] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [successMsg, setSuccesMsg] = useState(null);\r\n    const [errorMsg, setErrorMsg] = useState(null);\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    let options = <Option></Option>;\r\n    const formElementsArray = [];\r\n    const formElementsKeyArray = [];\r\n    for (let key in controls) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: controls[key]\r\n        });\r\n        formElementsKeyArray.push(key);\r\n    };\r\n\r\n    const getDrivers = () => {\r\n        setIsLoading(true);\r\n        Axios.get('/system/allDrivers')\r\n            .then(res => { setAllDrivers(res.data); setIsLoading(false) })\r\n            .catch(e => { setIsLoading(false); setErrorMsg(e) })\r\n    };\r\n    useEffect(() => {\r\n        getDrivers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if(showEditDriver) getDrivers();\r\n    }, [showEditDriver]);\r\n\r\n    useEffect(() => {\r\n        validFormHandler(controls, setFormIsValid);\r\n    }, [controls]);\r\n\r\n    useEffect(() => {\r\n        changeInputsFormText(controls, formElementsKeyArray, props.driversText, setControls)\r\n        // eslint-disable-next-line\r\n    }, [props.driversText]);\r\n\r\n    const setDriver = val => {\r\n        const actualDriver = allDrivers.find(elem => elem._id === val);\r\n        const copyControls = _.cloneDeep(controls);\r\n        formElementsKeyArray.forEach(elem => {\r\n            copyControls[elem].value = actualDriver[elem];\r\n            copyControls[elem].valid = true;\r\n            copyControls[elem].touched = true;\r\n        });\r\n        setControls(copyControls);\r\n    };\r\n\r\n    const submitHandler = event => {\r\n        if(event) event.preventDefault();\r\n        if(props.demo) { props.demoModal(true); return; }\r\n        const driver = new Driver(\r\n            {\r\n                id: controls._id.value.toLowerCase().trim(),\r\n                newData: {\r\n                    'Driver.name': controls.name.value.trim(),\r\n                    'Driver.lastName': controls.lastName.value.trim()\r\n                }\r\n            }\r\n        );\r\n        driver.updateDriver(setSuccesMsg, setErrorMsg, setIsLoading, getDrivers);\r\n    };\r\n    const deleteHandler = event => {\r\n        if(event) event.preventDefault();\r\n        if(props.demo) { props.demoModal(true); return; }\r\n        const driver = new Driver({\r\n            id: controls._id.value.toLowerCase().trim()\r\n        });\r\n        confirm({\r\n            title: controls.name.value + ' ' + controls.lastName.value,\r\n            content: props.driversText.deleteConfirm,\r\n            onOk() {\r\n                driver.deleteDriver(setSuccesMsg, setErrorMsg, setIsLoading, getDrivers);\r\n            },\r\n            onCancel() { return }\r\n        });\r\n    };\r\n\r\n    const cancelHandler = (event) => {\r\n        if (event) event.preventDefault();\r\n        cancelForm(controls, formElementsKeyArray, setControls);\r\n        setShowEditDriver(false);\r\n        setSuccesMsg(null);\r\n        setErrorMsg(null);\r\n        setIsLoading(true);\r\n        clearSelect()\r\n    };\r\n    const clearSelect = () => {\r\n        setTimeout(() => {\r\n            setIsLoading(false)\r\n        }, 10)\r\n    };\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n        <Input\r\n            key={formElement.id}\r\n            label={formElement.config.label}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => inputChangedHandler(event, controls, formElement.id, setControls)}\r\n        />\r\n    ));\r\n\r\n    if (allDrivers.length) {\r\n        options = allDrivers.map(driver => {\r\n            return <Option value={driver._id} key={driver._id}>\r\n                {driver.lastName + ' ' + driver.name}\r\n            </Option>\r\n        })\r\n    };\r\n\r\n    const formElement = (\r\n        <>\r\n            <h6>{props.driversText.editPanelName}</h6>\r\n            <p>{props.driversText.choiceDriver}</p>\r\n            <Select\r\n                style={{ width: 280 }}\r\n                onChange={(value) => setDriver(value)}\r\n                defaultValue={props.textMenu.drivers}>\r\n                {options}\r\n            </Select>\r\n            <form onSubmit={submitHandler} style={{ display: 'inline', textAlign: 'center' }}>\r\n                {form}\r\n                <Button\r\n                    disabled={!formIsValid || isLoading}\r\n                    onClick={submitHandler}    \r\n                >\r\n                    {props.driversText ? props.driversText.submitChange : null}\r\n                </Button>\r\n                <Button\r\n                    disabled={!formIsValid || isLoading}\r\n                    type='danger'\r\n                    style={{ margin: '1rem' }}\r\n                    onClick={deleteHandler}\r\n                >\r\n                    {props.driversText ? props.driversText.delete : null}\r\n                </Button>\r\n            </form>\r\n        </>\r\n    );\r\n    return (\r\n        <Drawer\r\n            visible={showEditDriver}\r\n            placement=\"left\"\r\n            closable={false}\r\n            width='auto'\r\n            style={{ textAlign: 'center' }}\r\n            onClose={cancelHandler}\r\n        >\r\n            {\r\n                !allDrivers.length ? \r\n                <h6 style={{margin: 20, color: 'rgba(43, 144, 143, 0.85)'}}>\r\n                    {props.driversText.noDrivers}\r\n                </h6> :\r\n                successMsg ?\r\n                    <div style={{ margin: 20, textAlign: 'center' }}>\r\n                        <h5 style={{color: 'rgba(43, 144, 143, 0.85)'}}>\r\n                            {props.driversText.editDriverSuccess}\r\n                        </h5>\r\n                        <h6>{controls.name.value + ' ' + controls.lastName.value}</h6>\r\n                        <p>Id: {successMsg}</p>\r\n                    </div> :\r\n                    errorMsg ?\r\n                    <div style={{margin: '1.5rem'}}>\r\n                        <h6 style={{color: 'red'}}>{\r\n                            props.errorText[errorMsg] ? \r\n                            props.errorText[errorMsg] : \r\n                            props.driversText.addDriverError\r\n                        }</h6>\r\n                    </div> :\r\n                        isLoading ? <Spinner /> :\r\n                            formElement\r\n            }\r\n            <Button onClick={cancelHandler} >\r\n                {props.driversText ? props.driversText.cancel : null}\r\n            </Button>\r\n        </Drawer>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {               \r\n        errorText: state.initLang.textHome.serverResErrors,\r\n        driversText: state.initLang.textOwner.driversForm,\r\n        textMenu: state.initLang.textOwner.userMenu,\r\n        demo: state.authReducer.demo\r\n    };\r\n};\r\nexport default connect(mapStateToProps)(EditDriver)"],"sourceRoot":""}